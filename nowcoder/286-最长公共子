# 286. |最长公共子序列

## Question description


我们有两个字符串m和n，如果它们的子串a和b内容相同，则称a和b是m和n的公共子序列。子串中的字符不一定在原字符串中连续。
 例如字符串“abcfbc”和“abfcab”，其中“abc”同时出现在两个字符串中，因此“abc”是它们的公共子序列。此外，“ab”、“af”等都是它们的字串。
 现在给你两个任意字符串（不包含空格），请帮忙计算它们的最长公共子序列的长度。


## Solution

Language: **['C']**

```


#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
 
using namespace std;
 
int main()
{
    string A, B;
    while(cin >> A >> B) {
        int aLength = A.length();
        int bLength = B.length();
        vector<vector<int> > dp(aLength, vector<int>(bLength, 0));
        // 初始化边界
        dp[0][0] = (A[0] == B[0])?1:0;
        for(int i=1; i<aLength; i++) {
            dp[i][0] = (A[i] == B[0]) ? 1 : 0;
            dp[i][0] = max(dp[i-1][0], dp[i][0]);
        }
        for(int j=1; j<bLength; j++) {
            dp[0][j] = (A[0] == B[j]) ? 1 : 0;
            dp[0][j] = max(dp[0][j-1], dp[0][j]);
        }
        // 计算
        for(int i=1; i<aLength; i++) {
            for(int j=1; j<bLength; j++) {
                dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
                if(A[i] == B[j]) {
                    dp[i][j] = max(dp[i][j], dp[i-1][j-1]+1);
                }
            }
        }
        cout << dp[aLength-1][bLength-1] << endl;
    }
 
    return 0;
}
```


