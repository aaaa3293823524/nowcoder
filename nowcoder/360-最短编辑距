# 360. |最短编辑距离

## Question description


UNIX系统下有一个行编辑器ed，它每次只对一行文本做删除一个字符、插入一个字符或替换一个字符三种操作。例如某一行的内容是“ABC”，经过把第二个字符替换成“D”、删除第一个字符、末尾插入一个字符“B”，这三步操作后，内容就变成了“DCB”。即“ABC”变成“DCB”需要经过3步操作，我们称它们的编辑距离为3。现在给你两个任意字符串（不包含空格），请帮忙计算它们的最短编辑距离。


## Solution

Language: **['Java']**

```


import java.util.Scanner;
// write your code here
public class Main{
    public static void main(String[] args){
        Scanner in = new Scanner(System.in);
        Main m = new Main();
        while(in.hasNext()){
            String[] str = in.nextLine().split(" ");
            String word1 = str[0];
            String word2 = str[1];
            int min = m.minDistance(word1,word2);
            System.out.println(min);
        }
    }
    public  int minDistance(String word1,String word2){
        int len1 = word1.length();
        int len2 = word2.length();
        int[][] dp = new int[len1+1][len2+1];
        for(int i =0;i<=len1;i++){
            dp[i][0] = i;
        }
        for(int j =0;j<= len2;j++){
            dp[0][j] = j;
        }
        for(int i =0;i< len1;i++){
            char ch1 = word1.charAt(i);
            for(int j =0;j< len2;j++){
                char ch2 = word2.charAt(j);
                if(ch1 == ch2){
                    dp[i+1][j+1] = dp[i][j];
                }else{
                    int replace = dp[i][j] +1;// ch1 代替 ch2
                    int insert = dp[i][j+1] + 1;// ch2 插入到 ch1 前面的位置
                    int delete = dp[i+1][j] + 1;// 删除ch2
                    int min =replace>insert?insert:replace;
                    min = min>delete?delete:min;
                    dp[i+1][j+1] = min;
                }
            }
        }
        return dp[len1][len2];
    }
}
```


