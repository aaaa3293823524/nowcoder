# 326. |过年回家

## Question description


NowCoder今年买了一辆新车，他决定自己开车回家过年。回家过程中要经过n个大小收费站，每个收费站的费用不同，你能帮他计算一下最少需要给多少过路费吗？


## Solution

Language: **['Java']**

```


import java.util.Scanner;
public class Main {
    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);
        while (in.hasNext()) {
            int m = in.nextInt();
            int n = in.nextInt();
            // 最短路径
            int dist[] = new int[n + 1];
            // 前一个顶点号
            int path[] = new int[n + 1];
            // 顶点是否被确定了
            boolean S[] = new boolean[n + 1];
            // 初始化邻接矩阵
            int[][] Edge = new int[n + 1][n + 1];
            for (int i = 0; i < n + 1; i++) {
                for (int j = 0; j < n + 1; j++) {
                    Edge[i][j] = Integer.MAX_VALUE;
                }
            }
            // 输入邻接矩阵
            for (int i = 0; i < m; i++) {
                Edge[in.nextInt()][in.nextInt()] = in.nextInt();
            }
            Dijkstr(Edge, dist, path, S, m, n);
        }
    }
    private static void Dijkstr(int[][] edge, int[] dist, int[] path, boolean[] s, int m, int n) {
        for (int i = 0; i < n + 1; i++) {
            dist[i] = edge[0][i];
            if (i != 0 && dist[i] < Integer.MAX_VALUE)
                path[i] = 0;
            else
                path[i] = -1;
        }
        // 开始对对一个站进行操作
        s[0] = true;
        dist[0] = 0;
        // 从顶点v确定n条路径
        for (int i = 0; i < n; i++) {
            int min = Integer.MAX_VALUE, u = 0;
            // 选择当前不在S中具有最短路径的顶点u
            for (int j = 0; j < n + 1; j++) {
                if (!s[j] && dist[j] < min) {
                    u = j;
                    min = dist[j];
                }
            }
            // 表示u已经在最短路径上
            s[u] = true;
            for (int k = 0; k < n + 1; k++) {
                if (!s[k] && edge[u][k] < Integer.MAX_VALUE && dist[u] + edge[u][k] < dist[k]) {
                    dist[k] = dist[u] + edge[u][k];
                    path[k] = u;
                }
            }
        }
        System.out.println(dist[n] + "");
    }
}
```


