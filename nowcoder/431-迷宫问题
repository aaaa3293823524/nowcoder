# 431. |迷宫问题

## Question description


定义一个二维数组N*M（其中2<=N<=10;2<=M<=10），如5 × 5数组下所示： 

int maze[5][5] = {

        0, 1, 0, 0, 0,

        0, 1, 0, 1, 0,

        0, 0, 0, 0, 0,

        0, 1, 1, 1, 0,

        0, 0, 0, 1, 0,

};

它表示一个迷宫，其中的1表示墙壁，0表示可以走的路，只能横着走或竖着走，不能斜着走，要求编程序找出从左上角到右下角的最短路线。入口点为[0,0],既第一空格是可以走的路。
Input
一个N × M的二维数组，表示一个迷宫。数据保证有唯一解,不考虑有多解的情况，即迷宫只有一条通道。
Output
左上角到右下角的最短路径，格式如样例所示。
Sample Input
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
Sample Output
(0, 0)
(1, 0)
(2, 0)
(2, 1)
(2, 2)
(2, 3)
(2, 4)
(3, 4)
(4, 4) 
 
 


## Solution

Language: **['C']**

```


#include <iostream>
#include <algorithm>
#include <stack>
using namespace std;
 
int main(){
    int N, M;
    while(cin >> N >> M){
        int **a =new int*[N];
        for(int i =0; i<N; i++){
            a[i] =new int[M];
        }
        for(int i =0; i<N; i++){
            for(int j =0; j<M; j++){
                cin >> a[i][j];
            }
        }
        int dir[4][2] = { {0,1}, {1,0}, {0,-1}, {-1,0} };//点的四个方向：下，右，上，左
        int visit[11][11] = {0}; //判定该点是否走过
        bool flag =0; //是否走完
        stack<pair<int,int>> stk;
        stk.push(make_pair(0,0));
        stk.push(make_pair(0,0));
        visit[0][0] =1;
        while(!flag){   //深度优先搜索思想，往该点四个方向探查，若有则从这点继续探寻，若没有则回溯到上一个点
            pair<int,int> p = stk.top();   //回退路径的点
            stk.pop();
            int i = p.first, j= p.second;
            for(int k =0; k <4;k++){  //对四个方向进行探查
                int dx = i + dir[k][0];
                int dy = j + dir[k][1];
                if(dx == N-1&&dy == M-1){ //到达终点
                    stk.push(make_pair(N-1, M-1));
                    flag =true;
                    break;
                }
                if(dx>=0&& dx<=N-1&& dy>=0&& dy<=M-1&& a[dx][dy] ==0&& visit[dx][dy] ==0){  //未被访问过且有路径
                    stk.push(make_pair(dx, dy));
                    visit[dx][dy] =1;
                    i = dx;     //从该点继续探查
                    j = dy;
                    k=-1;
                }
            }
        }
        stack<pair<int,int>> outputStk;  //把栈的先后顺序换一下输出
        while(!stk.empty()){
            outputStk.push(stk.top());
            stk.pop();
        }
        while(!outputStk.empty()){
            pair<int,int> p = outputStk.top();
            outputStk.pop();
            cout <<"("<<p.first<<","<<p.second<<")"<< endl;
        }
    }
    return 0;
}
```


