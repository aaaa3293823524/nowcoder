# 161. |计算表达式

## Question description


对于一个不存在括号的表达式进行计算


## Solution

Language: **['C']**

```


  #include<iostream>
#include<string>
#include<map>
#include<stack>
#include<cmath>
#include<cstdlib>
 
    using namespace std;
 
    bool isnum(char c)
{
 return (c>='0'&&c<='9');
}
 
    map<char,int> pri;
stack<char> ops;
stack<double> nums;
 
    double calculate(double a, char op, double b)
{
 switch(op)
 {
  case '+':
   return a+b;
  case '-':
   return a-b;
  case '*':
   return a*b;
  case '/':
   return a/b;
  case '^':
   return pow(a,b);
  default:
   return 0;
 }
}
 
    void do_calculate()
{
 double a=nums.top();
 nums.pop();
 double b=nums.top();
 nums.pop();
 char op = ops.top();
 ops.pop();
 nums.push(calculate(b,op,a)); //注意b在前面
}
 
    int main()
{
 pri.insert(pair<char,int>('+',1));
 pri.insert(pair<char,int>('-',1));
 pri.insert(pair<char,int>('*',2));
 pri.insert(pair<char,int>('/',2));
 pri.insert(pair<char,int>('^',3));
 string in;
 while(cin>>in)
 {
  while(!ops.empty()) ops.pop();
  while(!nums.empty()) nums.pop();
  for(int i=0;i<in.size();i++)
  {
   if(isnum(in[i]))
   {
    string tmp;
    tmp.push_back(in[i++]);
    while(isnum(in[i])||in[i]=='.')
    {
     tmp.push_back(in[i++]);
    }
    i--; //抵消for循环的i++
    nums.push(atof(tmp.c_str()));
    //atof只接受char*参数，用c_str把string转换成char*，atof在头文件cstdlib里
   }
   else
   {
    if(in[i]=='-'&&(nums.empty()||!isnum(in[i-1]))) //注意先判断nums是不是空，否则如果第一个是-in[i-1]数组越界
    {
     i++;
     string tmp;
     while(isnum(in[i])||in[i]=='.')
     {
      tmp.push_back(in[i++]);
     }
     i--;
     nums.push(-atof(tmp.c_str()));
    }
    else if(ops.empty())
    {
     ops.push(in[i]);
    }
    else if(in[i]=='(')
    {
     ops.push(in[i]); 
    }
    else if(in[i]==')')
    {
     while(ops.top()!='(')
     {
      do_calculate();
     }
     ops.pop(); //弹出(
    }
    else if(pri[in[i]]>pri[ops.top()])
    {
     ops.push(in[i]);
    }
    else if(pri[in[i]]<=pri[ops.top()]) //注意，等于的时候也得计算，不能入栈，不然类似1-1-1的计算就会变成1
    {
     do_calculate(); //计算一次之后，可能in[i]优先级还是不大于栈顶的优先级，所以继续把in[i]和新栈顶比较
     i--; //再次将in[i]和栈里面的符号对比，直到栈空或者符号优先级大于栈顶
    }
   }
  }
  while(!ops.empty())
  {
   do_calculate();
  }
  cout<<nums.top()<<endl;
 }
}
```


