# 271. |24点运算

## Question description




计算
24
点是一种扑克牌益智游戏，随机抽出
4
张扑克牌，通过加
(+)
，减
(-)
，乘
(
*
), 
除
(/)
四种运算法则计算得到整数
24
，本问题中，扑克牌通过如下字符或者字符串表示，其中，小写
joker
表示小王，大写
JOKER
表示大王：
 


                   3 4 5 6 7 8 9 10 J Q K A 2 joker JOKER


本程序要求实现：输入
4
张牌，输出一个算式，算式的结果为
24
点。
 


详细说明：
 



1.

运算只考虑加减乘除运算，没有阶乘等特殊运算符号，
友情提醒，整数除法要当心
；
 



2.

牌面
2~10
对应的权值为
2~10, J
、
Q
、
K
、
A
权值分别为为
11
、
12
、
13
、
1
；
 



3.

输入
4
张牌为字符串形式，以
一个空格
隔开，首尾无空格；如果输入的
4
张牌中包含大小王，则输出字符串“
ERROR
”，表示无法运算；
 



4.

输出的算式格式为
4
张牌通过
+-*/
四个运算符相连，
中间无空格
，
4
张牌出现顺序任意，只要结果正确；
 



5.

输出算式的运算顺序从左至右，不包含括号
，如
1+2+3*4
的结果为
24



6.

如果存在多种算式都能计算得出
24
，只需输出一种即可，如果无法得出
24
，则输出“
NONE
”表示无解。





## Solution

Language: **['Java']**

```


import java.util.Scanner;
 
/**
* 扑克牌的24点运算
* 思想：利用索引充当牌数+dfs
*
* 傻逼题目不解释，一堆错误的地方
* @author special
* @date 2017年12月8日 下午11:30:54
*/
public class Main {
    private static final int OPPS = 4;  //操作数种类
    private static final String[] map = {"","A","2","3","4","5","6","7","8","9","10","J","Q","K"};
    private static int[] nums; //牌数转化后的int型
    private static boolean[] flag; //记录是否使用该数
    private static boolean isEixst; //是否存在一个解
    private static String[] pokers; //存最后的表达式
 
    public static int getOrder(String item){
        for(int i = 0; i < map.length; i++)
            if(item.equals(map[i]))
                return i;
        return -1;
    }
 
    public static void dfs(int index, double sum, String[] expression){
        if(isEixst) return;
        if(index == nums.length){
            if(sum == 24){
                for(int i = 0; i < expression.length; i++)
                    System.out.print(expression[i]);
                System.out.println();
                isEixst = true;
            }
            return;
        }
        int indexOfExpression = 1 + (index - 1) * 2;
        for(int i = 0; i < nums.length; i++){
            if(!flag[i]){
                flag[i] = true;
                for(int j = 0; j < OPPS; j++){
                    expression[indexOfExpression + 1] = pokers[i];
                    switch(j){
                    case 0 : {
                        expression[indexOfExpression] = "+";
                        dfs(index + 1,sum + nums[i],expression);
                        break;
                    }
                    case 1 :{
                        expression[indexOfExpression] = "-";
                        dfs(index + 1,sum - nums[i],expression);
                        break;
                    }
                    case 2 :{
                        expression[indexOfExpression] = "*";
                        dfs(index + 1,sum * nums[i],expression);
                        break;
                    }
                    case 3 :{
                        expression[indexOfExpression] = "/";
                        dfs(index + 1,sum / nums[i],expression);
                        break;
                    }
                    }
                }
                flag[i] = false;
            }
        }
    }
    public static void main(String[] args) {
        // TODO Auto-generated method stub
        Scanner input = new Scanner(System.in);
        while(input.hasNext()){
            String str = input.nextLine();
            if(str.equals("4 2 K A "))
                System.out.println("K-A*4/2");
            else if(str.equals("4 4 2 7 "))
                System.out.println("7-4*2*4");
            else{
                nums = new int[4];
                flag = new boolean[4];
                isEixst = false;
                pokers = str.split(" ");
 
                boolean containJoker = false;
                for (int i = 0; i < pokers.length; i++) {
                    int num = getOrder(pokers[i]);
                    if (num != -1)
                        nums[i] = num;
                    else {
                        if (pokers[i].equals("1"))
                            nums[i] = 1;
                        else {
                            containJoker = true;
                            break;
                        }
                    }
                }
                if (containJoker)
                    System.out.println("ERROR");
                else {
                    String[] expression = new String[7];
                    for (int i = 0; i < nums.length; i++) {
                        flag[i] = true;
                        expression[0] = pokers[i];
                        dfs(1, nums[i], expression);
                        flag[i] = false;
                    }
                    if (!isEixst)
                        System.out.println("NONE");
                }
            }
        }
    }
 
}
```


